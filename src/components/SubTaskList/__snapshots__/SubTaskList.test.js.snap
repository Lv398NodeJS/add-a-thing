// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SubTaskList component should render correctly and match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SubTaskList />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "as": "div",
      "children": Array [
        <SubTaskProgressBar
          subtaskList={
            Array [
              Object {
                "completed": false,
                "id": "1",
                "text": "Test subtask 1",
              },
              Object {
                "completed": false,
                "id": "2",
                "text": "Test subtask 2",
              },
              Object {
                "completed": false,
                "id": "3",
                "text": "Test subtask 3",
              },
            ]
          }
        />,
        Array [
          <SubTaskItem
            changeSubTaskStatus={[Function]}
            completed={false}
            deleteSubTask={[Function]}
            id="1"
            text="Test subtask 1"
          />,
          <SubTaskItem
            changeSubTaskStatus={[Function]}
            completed={false}
            deleteSubTask={[Function]}
            id="2"
            text="Test subtask 2"
          />,
          <SubTaskItem
            changeSubTaskStatus={[Function]}
            completed={false}
            deleteSubTask={[Function]}
            id="3"
            text="Test subtask 3"
          />,
        ],
        <ForwardRef(render)
          className="justify-content-sm-center"
        >
          <ForwardRef
            as="div"
          >
            <SubTaskAdd
              addSubTask={[Function]}
            />
          </ForwardRef>
        </ForwardRef(render)>,
      ],
      "fluid": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "subtaskList": Array [
            Object {
              "completed": false,
              "id": "1",
              "text": "Test subtask 1",
            },
            Object {
              "completed": false,
              "id": "2",
              "text": "Test subtask 2",
            },
            Object {
              "completed": false,
              "id": "3",
              "text": "Test subtask 3",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "changeSubTaskStatus": [Function],
          "completed": false,
          "deleteSubTask": [Function],
          "id": "1",
          "text": "Test subtask 1",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "class",
        "props": Object {
          "changeSubTaskStatus": [Function],
          "completed": false,
          "deleteSubTask": [Function],
          "id": "2",
          "text": "Test subtask 2",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "3",
        "nodeType": "class",
        "props": Object {
          "changeSubTaskStatus": [Function],
          "completed": false,
          "deleteSubTask": [Function],
          "id": "3",
          "text": "Test subtask 3",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ForwardRef
            as="div"
          >
            <SubTaskAdd
              addSubTask={[Function]}
            />
          </ForwardRef>,
          "className": "justify-content-sm-center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "as": "div",
            "children": <SubTaskAdd
              addSubTask={[Function]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addSubTask": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "as": "div",
            },
            "displayName": "Col",
            "render": [Function],
          },
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": undefined,
          "displayName": "Bootstrap(Row)",
          "propTypes": undefined,
          "render": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "defaultProps": Object {
        "as": "div",
        "fluid": false,
      },
      "displayName": "Container",
      "render": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "as": "div",
        "children": Array [
          <SubTaskProgressBar
            subtaskList={
              Array [
                Object {
                  "completed": false,
                  "id": "1",
                  "text": "Test subtask 1",
                },
                Object {
                  "completed": false,
                  "id": "2",
                  "text": "Test subtask 2",
                },
                Object {
                  "completed": false,
                  "id": "3",
                  "text": "Test subtask 3",
                },
              ]
            }
          />,
          Array [
            <SubTaskItem
              changeSubTaskStatus={[Function]}
              completed={false}
              deleteSubTask={[Function]}
              id="1"
              text="Test subtask 1"
            />,
            <SubTaskItem
              changeSubTaskStatus={[Function]}
              completed={false}
              deleteSubTask={[Function]}
              id="2"
              text="Test subtask 2"
            />,
            <SubTaskItem
              changeSubTaskStatus={[Function]}
              completed={false}
              deleteSubTask={[Function]}
              id="3"
              text="Test subtask 3"
            />,
          ],
          <ForwardRef(render)
            className="justify-content-sm-center"
          >
            <ForwardRef
              as="div"
            >
              <SubTaskAdd
                addSubTask={[Function]}
              />
            </ForwardRef>
          </ForwardRef(render)>,
        ],
        "fluid": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "subtaskList": Array [
              Object {
                "completed": false,
                "id": "1",
                "text": "Test subtask 1",
              },
              Object {
                "completed": false,
                "id": "2",
                "text": "Test subtask 2",
              },
              Object {
                "completed": false,
                "id": "3",
                "text": "Test subtask 3",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "changeSubTaskStatus": [Function],
            "completed": false,
            "deleteSubTask": [Function],
            "id": "1",
            "text": "Test subtask 1",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "class",
          "props": Object {
            "changeSubTaskStatus": [Function],
            "completed": false,
            "deleteSubTask": [Function],
            "id": "2",
            "text": "Test subtask 2",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "3",
          "nodeType": "class",
          "props": Object {
            "changeSubTaskStatus": [Function],
            "completed": false,
            "deleteSubTask": [Function],
            "id": "3",
            "text": "Test subtask 3",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef
              as="div"
            >
              <SubTaskAdd
                addSubTask={[Function]}
              />
            </ForwardRef>,
            "className": "justify-content-sm-center",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "as": "div",
              "children": <SubTaskAdd
                addSubTask={[Function]}
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addSubTask": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "as": "div",
              },
              "displayName": "Col",
              "render": [Function],
            },
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "displayName": "Bootstrap(Row)",
            "propTypes": undefined,
            "render": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": Object {
          "as": "div",
          "fluid": false,
        },
        "displayName": "Container",
        "render": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
