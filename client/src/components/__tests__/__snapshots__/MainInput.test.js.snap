// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MainInput tests MainInput should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MainInput />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <OverlayTrigger
          defaultOverlayShown={false}
          overlay={
            <ForwardRef(render)
              className="gray-tooltip"
            >
              Add #num in the end to set priority 1 High, 2 Medium, 3 Low
            </ForwardRef(render)>
          }
          placement="bottom-start"
          trigger="focus"
        >
          <ForwardRef
            aria-describedby="basic-addon2"
            aria-label="Type task name"
            className=""
            maxLength="100"
            onChange={[Function]}
            onKeyPress={[Function]}
            placeholder="Type task name"
            size="lg"
            value=""
          />
        </OverlayTrigger>,
        <OverlayTrigger
          defaultOverlayShown={false}
          overlay={
            <ForwardRef(render)>
              Click to set priority.
            </ForwardRef(render)>
          }
          placement="bottom"
          trigger={
            Array [
              "hover",
              "focus",
            ]
          }
        >
          <ForwardRef
            as="select"
            className="priorityM"
            onChange={[Function]}
            size="lg"
            value="Medium"
          >
            <option
              value="High"
            >
              H
            </option>
            <option
              value="Medium"
            >
              M
            </option>
            <option
              value="Low"
            >
              L
            </option>
          </ForwardRef>
        </OverlayTrigger>,
        <ForwardRef>
          <SpeechRecognition
            setText={[Function]}
          />
          <ForwardRef
            active={false}
            disabled={false}
            onClick={[Function]}
            type="button"
            variant="outline-primary"
          >
            <img
              alt="add.svg"
              className="inputicon"
              src="add.svg"
            />
          </ForwardRef>
          <ForwardRef
            active={false}
            disabled={false}
            onClick={[Function]}
            type="button"
            variant="outline-danger"
          >
            <img
              alt="crossicon.svg"
              className="inputicon"
              src="crossicon.svg"
            />
          </ForwardRef>
        </ForwardRef>,
      ],
      "className": "mb-3 mt-3 main-input",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <ForwardRef
            aria-describedby="basic-addon2"
            aria-label="Type task name"
            className=""
            maxLength="100"
            onChange={[Function]}
            onKeyPress={[Function]}
            placeholder="Type task name"
            size="lg"
            value=""
          />,
          "defaultOverlayShown": false,
          "overlay": <ForwardRef(render)
            className="gray-tooltip"
          >
            Add #num in the end to set priority 1 High, 2 Medium, 3 Low
          </ForwardRef(render)>,
          "placement": "bottom-start",
          "trigger": "focus",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "aria-describedby": "basic-addon2",
            "aria-label": "Type task name",
            "className": "",
            "maxLength": "100",
            "onChange": [Function],
            "onKeyPress": [Function],
            "placeholder": "Type task name",
            "size": "lg",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Feedback": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "type": "valid",
              },
              "displayName": "Feedback",
              "propTypes": Object {
                "as": [Function],
                "type": [Function],
              },
              "render": [Function],
            },
            "displayName": "FormControl",
            "render": [Function],
          },
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <ForwardRef
            as="select"
            className="priorityM"
            onChange={[Function]}
            size="lg"
            value="Medium"
          >
            <option
              value="High"
            >
              H
            </option>
            <option
              value="Medium"
            >
              M
            </option>
            <option
              value="Low"
            >
              L
            </option>
          </ForwardRef>,
          "defaultOverlayShown": false,
          "overlay": <ForwardRef(render)>
            Click to set priority.
          </ForwardRef(render)>,
          "placement": "bottom",
          "trigger": Array [
            "hover",
            "focus",
          ],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "as": "select",
            "children": Array [
              <option
                value="High"
              >
                H
              </option>,
              <option
                value="Medium"
              >
                M
              </option>,
              <option
                value="Low"
              >
                L
              </option>,
            ],
            "className": "priorityM",
            "onChange": [Function],
            "size": "lg",
            "value": "Medium",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "H",
                "value": "High",
              },
              "ref": null,
              "rendered": "H",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "M",
                "value": "Medium",
              },
              "ref": null,
              "rendered": "M",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "L",
                "value": "Low",
              },
              "ref": null,
              "rendered": "L",
              "type": "option",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Feedback": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "type": "valid",
              },
              "displayName": "Feedback",
              "propTypes": Object {
                "as": [Function],
                "type": [Function],
              },
              "render": [Function],
            },
            "displayName": "FormControl",
            "render": [Function],
          },
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <SpeechRecognition
              setText={[Function]}
            />,
            <ForwardRef
              active={false}
              disabled={false}
              onClick={[Function]}
              type="button"
              variant="outline-primary"
            >
              <img
                alt="add.svg"
                className="inputicon"
                src="add.svg"
              />
            </ForwardRef>,
            <ForwardRef
              active={false}
              disabled={false}
              onClick={[Function]}
              type="button"
              variant="outline-danger"
            >
              <img
                alt="crossicon.svg"
                className="inputicon"
                src="crossicon.svg"
              />
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "setText": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "active": false,
              "children": <img
                alt="add.svg"
                className="inputicon"
                src="add.svg"
              />,
              "disabled": false,
              "onClick": [Function],
              "type": "button",
              "variant": "outline-primary",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "add.svg",
                "className": "inputicon",
                "src": "add.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "active": false,
                "disabled": false,
                "type": "button",
                "variant": "primary",
              },
              "displayName": "Button",
              "render": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "active": false,
              "children": <img
                alt="crossicon.svg"
                className="inputicon"
                src="crossicon.svg"
              />,
              "disabled": false,
              "onClick": [Function],
              "type": "button",
              "variant": "outline-danger",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "crossicon.svg",
                "className": "inputicon",
                "src": "crossicon.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "active": false,
                "disabled": false,
                "type": "button",
                "variant": "primary",
              },
              "displayName": "Button",
              "render": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": undefined,
          "displayName": "InputGroupAppend",
          "render": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "Append": Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": undefined,
        "displayName": "InputGroupAppend",
        "render": [Function],
      },
      "Checkbox": [Function],
      "Prepend": Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": undefined,
        "displayName": "InputGroupPrepend",
        "render": [Function],
      },
      "Radio": [Function],
      "Text": Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": undefined,
        "displayName": "InputGroupText",
        "render": [Function],
      },
      "defaultProps": undefined,
      "displayName": "Bootstrap(InputGroup)",
      "propTypes": undefined,
      "render": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <OverlayTrigger
            defaultOverlayShown={false}
            overlay={
              <ForwardRef(render)
                className="gray-tooltip"
              >
                Add #num in the end to set priority 1 High, 2 Medium, 3 Low
              </ForwardRef(render)>
            }
            placement="bottom-start"
            trigger="focus"
          >
            <ForwardRef
              aria-describedby="basic-addon2"
              aria-label="Type task name"
              className=""
              maxLength="100"
              onChange={[Function]}
              onKeyPress={[Function]}
              placeholder="Type task name"
              size="lg"
              value=""
            />
          </OverlayTrigger>,
          <OverlayTrigger
            defaultOverlayShown={false}
            overlay={
              <ForwardRef(render)>
                Click to set priority.
              </ForwardRef(render)>
            }
            placement="bottom"
            trigger={
              Array [
                "hover",
                "focus",
              ]
            }
          >
            <ForwardRef
              as="select"
              className="priorityM"
              onChange={[Function]}
              size="lg"
              value="Medium"
            >
              <option
                value="High"
              >
                H
              </option>
              <option
                value="Medium"
              >
                M
              </option>
              <option
                value="Low"
              >
                L
              </option>
            </ForwardRef>
          </OverlayTrigger>,
          <ForwardRef>
            <SpeechRecognition
              setText={[Function]}
            />
            <ForwardRef
              active={false}
              disabled={false}
              onClick={[Function]}
              type="button"
              variant="outline-primary"
            >
              <img
                alt="add.svg"
                className="inputicon"
                src="add.svg"
              />
            </ForwardRef>
            <ForwardRef
              active={false}
              disabled={false}
              onClick={[Function]}
              type="button"
              variant="outline-danger"
            >
              <img
                alt="crossicon.svg"
                className="inputicon"
                src="crossicon.svg"
              />
            </ForwardRef>
          </ForwardRef>,
        ],
        "className": "mb-3 mt-3 main-input",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <ForwardRef
              aria-describedby="basic-addon2"
              aria-label="Type task name"
              className=""
              maxLength="100"
              onChange={[Function]}
              onKeyPress={[Function]}
              placeholder="Type task name"
              size="lg"
              value=""
            />,
            "defaultOverlayShown": false,
            "overlay": <ForwardRef(render)
              className="gray-tooltip"
            >
              Add #num in the end to set priority 1 High, 2 Medium, 3 Low
            </ForwardRef(render)>,
            "placement": "bottom-start",
            "trigger": "focus",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "aria-describedby": "basic-addon2",
              "aria-label": "Type task name",
              "className": "",
              "maxLength": "100",
              "onChange": [Function],
              "onKeyPress": [Function],
              "placeholder": "Type task name",
              "size": "lg",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Feedback": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": Object {
                  "type": "valid",
                },
                "displayName": "Feedback",
                "propTypes": Object {
                  "as": [Function],
                  "type": [Function],
                },
                "render": [Function],
              },
              "displayName": "FormControl",
              "render": [Function],
            },
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <ForwardRef
              as="select"
              className="priorityM"
              onChange={[Function]}
              size="lg"
              value="Medium"
            >
              <option
                value="High"
              >
                H
              </option>
              <option
                value="Medium"
              >
                M
              </option>
              <option
                value="Low"
              >
                L
              </option>
            </ForwardRef>,
            "defaultOverlayShown": false,
            "overlay": <ForwardRef(render)>
              Click to set priority.
            </ForwardRef(render)>,
            "placement": "bottom",
            "trigger": Array [
              "hover",
              "focus",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "as": "select",
              "children": Array [
                <option
                  value="High"
                >
                  H
                </option>,
                <option
                  value="Medium"
                >
                  M
                </option>,
                <option
                  value="Low"
                >
                  L
                </option>,
              ],
              "className": "priorityM",
              "onChange": [Function],
              "size": "lg",
              "value": "Medium",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "H",
                  "value": "High",
                },
                "ref": null,
                "rendered": "H",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "M",
                  "value": "Medium",
                },
                "ref": null,
                "rendered": "M",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "L",
                  "value": "Low",
                },
                "ref": null,
                "rendered": "L",
                "type": "option",
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Feedback": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": Object {
                  "type": "valid",
                },
                "displayName": "Feedback",
                "propTypes": Object {
                  "as": [Function],
                  "type": [Function],
                },
                "render": [Function],
              },
              "displayName": "FormControl",
              "render": [Function],
            },
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <SpeechRecognition
                setText={[Function]}
              />,
              <ForwardRef
                active={false}
                disabled={false}
                onClick={[Function]}
                type="button"
                variant="outline-primary"
              >
                <img
                  alt="add.svg"
                  className="inputicon"
                  src="add.svg"
                />
              </ForwardRef>,
              <ForwardRef
                active={false}
                disabled={false}
                onClick={[Function]}
                type="button"
                variant="outline-danger"
              >
                <img
                  alt="crossicon.svg"
                  className="inputicon"
                  src="crossicon.svg"
                />
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "setText": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "active": false,
                "children": <img
                  alt="add.svg"
                  className="inputicon"
                  src="add.svg"
                />,
                "disabled": false,
                "onClick": [Function],
                "type": "button",
                "variant": "outline-primary",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "add.svg",
                  "className": "inputicon",
                  "src": "add.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": Object {
                  "active": false,
                  "disabled": false,
                  "type": "button",
                  "variant": "primary",
                },
                "displayName": "Button",
                "render": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "active": false,
                "children": <img
                  alt="crossicon.svg"
                  className="inputicon"
                  src="crossicon.svg"
                />,
                "disabled": false,
                "onClick": [Function],
                "type": "button",
                "variant": "outline-danger",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "crossicon.svg",
                  "className": "inputicon",
                  "src": "crossicon.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": Object {
                  "active": false,
                  "disabled": false,
                  "type": "button",
                  "variant": "primary",
                },
                "displayName": "Button",
                "render": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "displayName": "InputGroupAppend",
            "render": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "Append": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": undefined,
          "displayName": "InputGroupAppend",
          "render": [Function],
        },
        "Checkbox": [Function],
        "Prepend": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": undefined,
          "displayName": "InputGroupPrepend",
          "render": [Function],
        },
        "Radio": [Function],
        "Text": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": undefined,
          "displayName": "InputGroupText",
          "render": [Function],
        },
        "defaultProps": undefined,
        "displayName": "Bootstrap(InputGroup)",
        "propTypes": undefined,
        "render": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
