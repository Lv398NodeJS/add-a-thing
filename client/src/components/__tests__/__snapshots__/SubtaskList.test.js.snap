// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SubtaskList component should render correctly and match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SubtaskList
    currentFilter="SHOW_ALL"
    subtaskActions={
      Object {
        "fetchInfoForSubtaskList": [MockFunction] {
          "calls": Array [
            Array [
              undefined,
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
    subtaskList={
      Array [
        Object {
          "completed": false,
          "id": "1",
          "text": "Test subtask 1",
        },
        Object {
          "completed": false,
          "id": "2",
          "text": "Test subtask 2",
        },
        Object {
          "completed": false,
          "id": "3",
          "text": "Test subtask 3",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": "1",
    "nodeType": "function",
    "props": Object {
      "completed": false,
      "id": "1",
      "taskRef": undefined,
      "taskStatus": undefined,
      "text": "Test subtask 1",
    },
    "ref": null,
    "rendered": null,
    "type": Object {
      "$$typeof": Symbol(react.memo),
      "WrappedComponent": [Function],
      "compare": null,
      "displayName": "Connect(SubtaskItem)",
      "type": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": "1",
      "nodeType": "function",
      "props": Object {
        "completed": false,
        "id": "1",
        "taskRef": undefined,
        "taskStatus": undefined,
        "text": "Test subtask 1",
      },
      "ref": null,
      "rendered": null,
      "type": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(SubtaskItem)",
        "type": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
    Object {
      "instance": null,
      "key": "2",
      "nodeType": "function",
      "props": Object {
        "completed": false,
        "id": "2",
        "taskRef": undefined,
        "taskStatus": undefined,
        "text": "Test subtask 2",
      },
      "ref": null,
      "rendered": null,
      "type": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(SubtaskItem)",
        "type": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
    Object {
      "instance": null,
      "key": "3",
      "nodeType": "function",
      "props": Object {
        "completed": false,
        "id": "3",
        "taskRef": undefined,
        "taskStatus": undefined,
        "text": "Test subtask 3",
      },
      "ref": null,
      "rendered": null,
      "type": Object {
        "$$typeof": Symbol(react.memo),
        "WrappedComponent": [Function],
        "compare": null,
        "displayName": "Connect(SubtaskItem)",
        "type": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
